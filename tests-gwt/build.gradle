/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2014-2016 Sri Harsha Chilakapati
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
apply plugin: 'java'
apply plugin: 'gwt'
apply plugin: 'jetty'

sourceCompatibility = 1.8
targetCompatibility = 1.8

gwt {
    minHeapSize = "512M";
    maxHeapSize = "1024M";

    gwtVersion = '2.8.0-beta1'
    modules 'com.shc.silenceengine.tests.GwtTests'
    devModules 'com.shc.silenceengine.tests.GwtTests'

    compiler {
        style = 'DETAILED'
    }
}

javadoc {
    options.addStringOption("sourcepath", "")
}

dependencies {
    providedCompile 'com.google.gwt:gwt-user:2.8.0-beta1'
    providedCompile 'com.google.gwt:gwt-servlet:2.8.0-beta1'

    providedCompile project(":silenceengine")
    providedCompile project(":backend-gwt")
    providedCompile project(":tests")
}

task run(type: JettyRunWar) {
    dependsOn war
    webApp = war.archivePath
    daemon = true
}

task superDev(type: de.richsource.gradle.plugins.gwt.GwtSuperDev) {
    dependsOn run
    doFirst {
        gwt.modules = gwt.devModules
    }
}

war {
    from sourceSets.main.resources
    from files(project(':silenceengine').sourceSets.main.output.resourcesDir)
    from files(project(':tests').sourceSets.main.output.resourcesDir)
}

task addSource << {
    sourceSets.main.compileClasspath += files(project(':silenceengine').sourceSets.main.allSource)
    sourceSets.main.compileClasspath += files(project(':backend-gwt').sourceSets.main.allSource)
    sourceSets.main.compileClasspath += files(project(':tests').sourceSets.main.allSource)
}

tasks.compileGwt.dependsOn(addSource)
tasks.draftCompileGwt.dependsOn(addSource)
